#!/usr/bin/env python3

import os
cwd = os.getcwd()

import pandas as pd  
import numpy as np

from sklearn import metrics
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from numpy.polynomial.polynomial import polyfit
import matplotlib.pyplot as plt

from sklearn.ensemble import RandomForestRegressor

rgs = RandomForestRegressor(n_estimators=100, n_jobs=-1)

np.random.seed(None)

df = pd.read_csv(cwd + '/Percentage_Female_Graduates_STEM_Descriptors.csv')
df_nn = df.dropna()

subjects = ['STEM', 'SCI_MATH', 'ENG', 'ICT']

for sub in subjects:
	
	df_sub = pd.read_csv(cwd + '/Descriptors_' + sub + '.txt')
	
	descriptors = df_sub['Descriptor'].tolist()
		
	print('Iter,RSquared', file=open(cwd + '/model/Iteration_' + sub + '.csv', 'w'))
	
	rsqn = -1000000
	
	for n in range(1, 101):
		
		training, testing = train_test_split(df_nn, test_size=0.2)
		
		X_train = training[descriptors].values # Descriptors
		X_test = testing[descriptors].values # Descriptors
		y_train = training[sub].values # Real % Female ICT Graduates
		y_test = testing[sub].values # Real % Female ICT Graduates
		
		y_pred = rgs.fit(X_train, y_train).predict(X_test)
		
		rsq = r2_score(y_test, y_pred)
		
		print(str(n) + ',' + str(rsq), file=open(cwd + '/model/Iteration_' + sub + '.csv', 'a'))
		
		if rsq >= rsqn:
			rsqn = rsq
			
			b, m = polyfit(y_test, y_pred, 1)
			
			plt.plot(y_test, y_pred, '.')
			plt.plot(y_test, b + m * y_test, '-')
			plt.xlabel('Real % Female ' + sub + ' Graduates' + ' | ' + 'RSq = %0.3f' % rsq)
			plt.ylabel('Predicted % Female ' + sub +' Graduates')
			plt.title('sciting.eu', color='#22697f') 
#			plt.title('RSq = %0.3f' % rsq)
			plt.savefig(cwd + '/model/Percentage_Female_' + sub + '_Graduates_RF.png', dpi=300, bbox_inches='tight')
			#plt.show()
			plt.close()
			
			### Feature Importance ###
			rgs.fit(X_train, y_train) 
			rgs.score(X_test, y_test)
			
			X_index = training[descriptors]
			df_fi = pd.DataFrame(rgs.feature_importances_, index = X_index.columns, columns=['importance'])
			df_fi['features'] = df_fi.index
			df_fi = df_fi.sort_values('importance', ascending=False)
			df_fi.to_csv(cwd + '/model/Features_' + sub + '.csv', index=False)
			
		
